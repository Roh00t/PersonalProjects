import pefile
import os
import re
import string
import math
import hashlib
import requests
import yaml
from dotenv import load_dotenv

load_dotenv()  # Load environment variables
VIRUSTOTAL_API_KEY = os.getenv("VIRUSTOTAL_API_KEY")  # Get API key from .env

class MalwareScanner:
    def __init__(self, file_path):
        self.file_path = file_path
        self.pe = None

    def load_pe(self):
        try:
            self.pe = pefile.PE(self.file_path)
        except pefile.PEFormatError:
            print(f"[ERROR] {self.file_path} is not a valid PE file.")
            return False
        return True

    def extract_headers(self):
        """Extracts key PE header information."""
        headers = {
            "Machine": self.pe.FILE_HEADER.Machine,
            "NumberOfSections": self.pe.FILE_HEADER.NumberOfSections,
            "TimeDateStamp": self.pe.FILE_HEADER.TimeDateStamp,
        }
        return headers

    def extract_imports(self):
        """Extracts imported DLLs and functions."""
        imports = {}
        if hasattr(self.pe, 'DIRECTORY_ENTRY_IMPORT'):
            for entry in self.pe.DIRECTORY_ENTRY_IMPORT:
                imports[entry.dll.decode()] = [imp.name.decode() if imp.name else None for imp in entry.imports]
        return imports

    def extract_strings(self, min_length=4):
        """Extracts readable strings from the binary."""
        with open(self.file_path, "rb") as f:
            raw_data = f.read()
        return [m.group().decode() for m in re.finditer(rb'[' + string.printable.encode() + rb']{' + str(min_length) + rb',}', raw_data)]

    def calculate_entropy(self, data):
        """Computes Shannon entropy to detect packed/encrypted sections."""
        if not data:
            return 0
        entropy = 0
        freq_dict = {}
        for byte in data:
            freq_dict[byte] = freq_dict.get(byte, 0) + 1
        data_len = len(data)
        for count in freq_dict.values():
            probability = count / data_len
            entropy -= probability * math.log2(probability)
        return entropy

    def check_section_entropy(self):
        """Analyzes section entropy to detect packed or encrypted sections."""
        entropy_results = {}
        for section in self.pe.sections:
            entropy = self.calculate_entropy(section.get_data())
            entropy_results[section.Name.decode().strip('\x00')] = entropy
        return entropy_results

    def get_file_hash(self):
        """Computes SHA-256 hash of the file."""
        sha256 = hashlib.sha256()
        with open(self.file_path, "rb") as f:
            while chunk := f.read(4096):
                sha256.update(chunk)
        return sha256.hexdigest()

    def check_virustotal(self):
        """Queries VirusTotal to check if the file is known malware."""
        file_hash = self.get_file_hash()
        url = f"https://www.virustotal.com/api/v3/files/{file_hash}"
        headers = {"x-apikey": VIRUSTOTAL_API_KEY}
        
        try:
            response = requests.get(url, headers=headers)
            if response.status_code == 200:
                return response.json()
            else:
                return {"error": f"File not found in VirusTotal database (Status Code: {response.status_code})"}
        except requests.RequestException as e:
            return {"error": f"VirusTotal API request failed: {e}"}

    def analyze(self):
        """Runs all scans on the file."""
        if not self.load_pe():
            return None
        
        results = {
            "Headers": self.extract_headers(),
            "Imports": self.extract_imports(),
            "Strings": self.extract_strings(),
            "Section Entropy": self.check_section_entropy(),
            "SHA-256 Hash": self.get_file_hash(),
            "VirusTotal Result": self.check_virustotal()
        }

        return results