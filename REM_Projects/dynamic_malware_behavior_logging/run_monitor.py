import threading
import logging
import time
from registry_monitor import RegistryMonitor
from filesystem_monitor import FileMonitor
from network_monitor import start_network_monitor

# Configure logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

def start_registry_monitor():
    """Starts the registry monitoring module."""
    try:
        logging.info("Starting Registry Monitor...")
        monitor = RegistryMonitor()
        monitor.monitor_changes()
    except Exception as e:
        logging.error(f"Registry Monitor encountered an error: {e}")

def start_filesystem_monitor():
    """Starts the filesystem monitoring module."""
    try:
        logging.info("Starting Filesystem Monitor...")
        monitor = FileMonitor(path="C:\\Users\\Public")  # Modify path as needed
        monitor.start()
    except Exception as e:
        logging.error(f"Filesystem Monitor encountered an error: {e}")

def start_network_monitoring():
    """Starts the network monitoring module."""
    try:
        logging.info("Starting Network Monitor...")
        start_network_monitor()
    except Exception as e:
        logging.error(f"Network Monitor encountered an error: {e}")

if __name__ == "__main__":
    logging.info("[*] Malware Behavior Logging Started")

    # Create threads for each monitoring module
    registry_thread = threading.Thread(target=start_registry_monitor, daemon=True)
    filesystem_thread = threading.Thread(target=start_filesystem_monitor, daemon=True)
    network_thread = threading.Thread(target=start_network_monitoring, daemon=True)

    # Start all monitoring threads
    registry_thread.start()
    filesystem_thread.start()
    network_thread.start()

    try:
        while True:
            time.sleep(5)  # Keep the main thread alive
    except KeyboardInterrupt:
        logging.info("[*] Stopping all monitoring services...")
