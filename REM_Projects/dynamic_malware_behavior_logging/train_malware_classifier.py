import os
import json
import joblib
import numpy as np
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report

# Path to training data
DATASET_DIR = "./dataset"  # Update with your dataset location

# Function to detect file encoding
def detect_encoding(file_path):
    import chardet
    with open(file_path, 'rb') as f:
        result = chardet.detect(f.read())
    return result['encoding']

# Load dataset
benign_samples = []
malware_samples = []

for file in os.listdir(DATASET_DIR):
    file_path = os.path.join(DATASET_DIR, file)
    try:
        # Detect file encoding
        encoding = detect_encoding(file_path)
        with open(file_path, "r", encoding=encoding) as f:
            data = json.load(f)
            if data.get("label") == "benign":
                benign_samples.append(" ".join(data.get("suspicious_functions", [])))
            elif data.get("label") == "malware":
                malware_samples.append(" ".join(data.get("suspicious_functions", [])))
    except Exception as e:
        print(f"Error loading {file}: {e}")

# Ensure we have data to train on
if not benign_samples or not malware_samples:
    raise ValueError("Dataset is empty or incorrectly labeled. Please check your data.")

# Prepare dataset
X = benign_samples + malware_samples
y = [0] * len(benign_samples) + [1] * len(malware_samples)

# Convert text data into feature vectors
vectorizer = CountVectorizer()
X_vectorized = vectorizer.fit_transform(X)

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_vectorized, y, test_size=0.2, random_state=42)

# Train classifier
clf = RandomForestClassifier(n_estimators=100, random_state=42)
clf.fit(X_train, y_train)

# Evaluate model
predictions = clf.predict(X_test)
accuracy = accuracy_score(y_test, predictions)
print(f"Model Accuracy: {accuracy:.4f}")
print("Classification Report:")
print(classification_report(y_test, predictions))

# Save trained model and vectorizer
os.makedirs("models", exist_ok=True)
joblib.dump(clf, "models/malware_classifier.pkl")
joblib.dump(vectorizer, "models/vectorizer.pkl")
print("[INFO] Model and vectorizer saved successfully!")