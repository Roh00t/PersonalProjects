import threading
import logging
from src.filesystem_monitor import FileMonitor
from src.network_monitor import start_network_monitor
from src.registry_monitor import RegistryMonitor

# Configure logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

def run_filesystem_monitor():
    """
    Starts the filesystem monitor in a separate thread.
    """
    try:
        file_monitor = FileMonitor(path="C:\\Users\\Public")  # Adjust path as needed
        file_monitor.start()
    except Exception as e:
        logging.error(f"Filesystem monitor encountered an error: {e}")

def run_network_monitor():
    """
    Starts the network monitor in a separate thread.
    """
    try:
        network_monitor = start_network_monitor(interface="eth0")  # Adjust interface if needed
    except Exception as e:
        logging.error(f"Network monitor encountered an error: {e}")

def run_registry_monitor():
    """
    Starts the registry monitor in a separate thread.
    """
    try:
        registry_monitor = RegistryMonitor(interval=5)
        registry_monitor.start_monitoring()
    except Exception as e:
        logging.error(f"Registry monitor encountered an error: {e}")

if __name__ == "__main__":
    logging.info("Starting malware behavior monitoring system...")

    try:
        # Run each monitor in a separate thread
        fs_thread = threading.Thread(target=run_filesystem_monitor, daemon=True)
        net_thread = threading.Thread(target=run_network_monitor, daemon=True)
        reg_thread = threading.Thread(target=run_registry_monitor, daemon=True)

        fs_thread.start()
        net_thread.start()
        reg_thread.start()

        # Keep the main thread alive while monitoring runs in background
        while True:
            pass
    except KeyboardInterrupt:
        logging.info("Stopping malware monitoring system...")
    except Exception as e:
        logging.error(f"Unexpected error in run_monitor: {e}")
