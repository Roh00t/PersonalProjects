import scapy.all as scapy
import logging
import threading

# Configure logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

class NetworkMonitor:
    """
    Captures network traffic and identifies suspicious connections.
    """

    def __init__(self, interface="eth0"):
        """
        Initializes the network monitor.

        :param interface: The network interface to capture packets on (default: eth0).
        """
        self.interface = interface
        self.running = False

    def process_packet(self, packet):
        """
        Analyzes captured packets and logs potential suspicious activity.

        :param packet: Captured network packet.
        """
        try:
            if packet.haslayer(scapy.IP):
                src_ip = packet[scapy.IP].src
                dst_ip = packet[scapy.IP].dst
                protocol = packet[scapy.IP].proto

                # Log basic packet details
                logging.info(f"Captured Packet: {src_ip} -> {dst_ip} | Protocol: {protocol}")

                # Detect possible C2 (Command & Control) communication (example heuristic)
                suspicious_ips = ["192.168.1.100", "10.0.0.5"]  # Example of known bad IPs (Update this dynamically)
                if dst_ip in suspicious_ips:
                    logging.warning(f"Suspicious connection detected! {src_ip} -> {dst_ip}")

        except Exception as e:
            logging.error(f"Error processing packet: {e}")

    def start(self):
        """
        Starts network packet sniffing.
        """
        try:
            self.running = True
            logging.info(f"Starting network monitoring on interface: {self.interface}")
            scapy.sniff(iface=self.interface, store=False, prn=self.process_packet, stop_filter=lambda x: not self.running)
        except Exception as e:
            logging.error(f"Failed to start network monitor: {e}")

    def stop(self):
        """
        Stops the network monitor.
        """
        logging.info("Stopping network monitoring...")
        self.running = False

def start_network_monitor(interface="eth0"):
    """
    Runs the network monitor in a separate thread.
    """
    monitor = NetworkMonitor(interface)
    thread = threading.Thread(target=monitor.start)
    thread.daemon = True
    thread.start()
    return monitor

if __name__ == "__main__":
    monitor = NetworkMonitor(interface="eth0")  # Update interface if needed
    try:
        monitor.start()
    except KeyboardInterrupt:
        monitor.stop()
