import winreg
import logging
import time

# Configure logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

class RegistryMonitor:
    """
    Monitors Windows Registry for suspicious modifications.
    """

    REGISTRY_PATHS = [
        (winreg.HKEY_LOCAL_MACHINE, r"SOFTWARE\Microsoft\Windows\CurrentVersion\Run"),
        (winreg.HKEY_CURRENT_USER, r"Software\Microsoft\Windows\CurrentVersion\Run"),
    ]

    def __init__(self, interval=5):
        """
        Initializes the registry monitor.

        :param interval: Time interval (in seconds) to check for registry changes.
        """
        self.interval = interval
        self.known_entries = {}

    def read_registry(self, hive, subkey):
        """
        Reads the registry key and returns its values.

        :param hive: The registry hive (e.g., HKEY_LOCAL_MACHINE).
        :param subkey: The registry path to monitor.
        :return: Dictionary of registry values.
        """
        try:
            with winreg.OpenKey(hive, subkey, 0, winreg.KEY_READ) as key:
                values = {}
                index = 0
                while True:
                    try:
                        name, data, _ = winreg.EnumValue(key, index)
                        values[name] = data
                        index += 1
                    except OSError:
                        break
                return values
        except Exception as e:
            logging.error(f"Error accessing registry {subkey}: {e}")
            return {}

    def detect_changes(self):
        """
        Detects modifications in monitored registry keys.
        """
        for hive, subkey in self.REGISTRY_PATHS:
            current_entries = self.read_registry(hive, subkey)
            if subkey not in self.known_entries:
                self.known_entries[subkey] = current_entries
                continue

            old_entries = self.known_entries[subkey]

            added = {k: v for k, v in current_entries.items() if k not in old_entries}
            removed = {k: v for k, v in old_entries.items() if k not in current_entries}
            modified = {k: v for k, v in current_entries.items() if k in old_entries and old_entries[k] != v}

            if added:
                for k, v in added.items():
                    logging.warning(f"[Registry] New entry added: {k} -> {v} in {subkey}")
            if removed:
                for k, v in removed.items():
                    logging.warning(f"[Registry] Entry removed: {k} in {subkey}")
            if modified:
                for k, v in modified.items():
                    logging.warning(f"[Registry] Entry modified: {k} -> {v} in {subkey}")

            self.known_entries[subkey] = current_entries

    def start_monitoring(self):
        """
        Continuously monitors the registry for changes.
        """
        logging.info("Starting registry monitoring...")
        try:
            while True:
                self.detect_changes()
                time.sleep(self.interval)
        except KeyboardInterrupt:
            logging.info("Registry monitoring stopped by user.")
        except Exception as e:
            logging.error(f"Unexpected error in registry monitoring: {e}")

if __name__ == "__main__":
    monitor = RegistryMonitor(interval=5)
    monitor.start_monitoring()
