import os
import json
import logging
import pandas as pd
from datetime import datetime

# Configure logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

class ReportGenerator:
    """
    Generates structured reports based on collected malware behavior data.
    Supports exporting to JSON, CSV, and HTML formats.
    """

    def __init__(self, reports_dir="reports"):
        """
        Initializes the report generator.

        :param reports_dir: Directory where reports will be stored.
        """
        self.reports_dir = reports_dir
        os.makedirs(self.reports_dir, exist_ok=True)

    def generate_report(self, data, report_name=None, formats=["json", "csv", "html"]):
        """
        Generates a report from collected data in multiple formats.

        :param data: Dictionary containing report details.
        :param report_name: Optional custom name for the report.
        :param formats: List of formats to export (e.g., ["json", "csv", "html"]).
        """
        try:
            if not data:
                raise ValueError("No data provided for report generation.")

            timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
            report_name = report_name or f"malware_report_{timestamp}"

            df = pd.DataFrame([data])  # Convert data to Pandas DataFrame

            for fmt in formats:
                report_path = os.path.join(self.reports_dir, f"{report_name}.{fmt}")
                if fmt == "json":
                    with open(report_path, "w") as f:
                        json.dump(data, f, indent=4)
                elif fmt == "csv":
                    df.to_csv(report_path, index=False)
                elif fmt == "html":
                    df.to_html(report_path, index=False)
                else:
                    logging.warning(f"Unsupported report format: {fmt}")

                logging.info(f"Report saved: {report_path}")

        except Exception as e:
            logging.error(f"Error generating report: {e}")

    def get_reports_list(self):
        """
        Lists all generated reports in the reports directory.

        :return: List of report filenames.
        """
        try:
            reports = os.listdir(self.reports_dir)
            return [report for report in reports if report.endswith((".json", ".csv", ".html"))]
        except Exception as e:
            logging.error(f"Error listing reports: {e}")
            return []

# Example usage
if __name__ == "__main__":
    generator = ReportGenerator()
    sample_data = {
        "file": "malware.exe",
        "suspicious_functions": ["CreateRemoteThread", "WriteProcessMemory"],
        "heuristic_analysis": {"code_injection": ["CreateRemoteThread"]},
        "ml_prediction": "Malicious",
    }
    generator.generate_report(sample_data)
    print("Available Reports:", generator.get_reports_list())
