import logging
import os
from datetime import datetime

class MalwareLogger:
    """
    A robust logging system for malware behavior tracking.
    Logs events related to registry, filesystem, and network activity.
    """

    def __init__(self, log_dir="logs", log_filename=None):
        """
        Initializes the logger.

        :param log_dir: Directory where logs will be stored.
        :param log_filename: Optional custom log filename.
        """
        self.log_dir = log_dir
        self.log_filename = log_filename or f"malware_log_{datetime.now().strftime('%Y-%m-%d_%H-%M-%S')}.log"
        self.log_path = os.path.join(self.log_dir, self.log_filename)

        # Ensure log directory exists
        os.makedirs(self.log_dir, exist_ok=True)

        # Configure logging
        logging.basicConfig(
            filename=self.log_path,
            level=logging.INFO,
            format="%(asctime)s - %(levelname)s - %(message)s",
            datefmt="%Y-%m-%d %H:%M:%S"
        )
        self.logger = logging.getLogger("MalwareLogger")

    def log_event(self, event_type, message):
        """
        Logs an event with a specific type.

        :param event_type: The category of the event (e.g., Registry, Filesystem, Network).
        :param message: The event description.
        """
        try:
            log_entry = f"[{event_type.upper()}] {message}"
            self.logger.info(log_entry)
            print(log_entry)  # Print to console for real-time feedback
        except Exception as e:
            print(f"Error logging event: {e}")

    def log_error(self, message):
        """
        Logs an error message.

        :param message: The error message.
        """
        try:
            self.logger.error(f"[ERROR] {message}")
        except Exception as e:
            print(f"Error logging error message: {e}")

    def get_log_file(self):
        """
        Returns the log file path.

        :return: Path to the log file.
        """
        return self.log_path

# Example usage
if __name__ == "__main__":
    logger = MalwareLogger()
    logger.log_event("Filesystem", "New suspicious file detected: C:\\Windows\\System32\\malware.exe")
    logger.log_event("Network", "Suspicious outbound connection detected: 192.168.1.10:8080")
    logger.log_error("Failed to access registry key HKCU\\Software\\Malicious")
    print(f"Logs saved to: {logger.get_log_file()}")
