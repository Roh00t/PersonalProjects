import os
import time
import logging
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

# Configure logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

class FileMonitorHandler(FileSystemEventHandler):
    """
    Handles filesystem events such as file creation, modification, and deletion.
    """

    def on_created(self, event):
        """Triggered when a file or directory is created."""
        logging.info(f"File created: {event.src_path}")

    def on_modified(self, event):
        """Triggered when a file or directory is modified."""
        logging.info(f"File modified: {event.src_path}")

    def on_deleted(self, event):
        """Triggered when a file or directory is deleted."""
        logging.info(f"File deleted: {event.src_path}")

class FileMonitor:
    """
    Monitors file system changes in a given directory.
    """

    def __init__(self, path="C:\\Users\\Public", recursive=True):
        """
        Initializes the file monitoring system.

        :param path: The directory path to monitor.
        :param recursive: Whether to monitor subdirectories.
        """
        self.path = path
        self.recursive = recursive
        self.event_handler = FileMonitorHandler()
        self.observer = Observer()

    def start(self):
        """
        Starts monitoring the specified directory.
        """
        try:
            if not os.path.exists(self.path):
                raise FileNotFoundError(f"Directory '{self.path}' does not exist.")

            logging.info(f"Starting file system monitoring on: {self.path}")
            self.observer.schedule(self.event_handler, self.path, recursive=self.recursive)
            self.observer.start()

            while True:
                time.sleep(5)  # Keep the observer running
        except KeyboardInterrupt:
            logging.info("File monitoring stopped by user.")
            self.stop()
        except Exception as e:
            logging.error(f"Error in FileMonitor: {e}")
            self.stop()

    def stop(self):
        """
        Stops the monitoring process.
        """
        self.observer.stop()
        self.observer.join()
        logging.info("File monitoring stopped.")

if __name__ == "__main__":
    monitor = FileMonitor(path="C:\\Users\\Public")  # Modify path if needed
    monitor.start()
