import pefile
import hashlib
import re
import json
import os
import requests
import joblib
import logging
from collections import defaultdict
from sklearn.feature_extraction.text import CountVectorizer

# Configure logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# VirusTotal API Key (Stored in Environment Variables)
VIRUSTOTAL_API_KEY = os.getenv("VIRUSTOTAL_API_KEY")

# Load ML model and vectorizer
try:
    model = joblib.load("models/malware_classifier.pkl")
    vectorizer = joblib.load("models/vectorizer.pkl")
except FileNotFoundError:
    model, vectorizer = None, None
    logging.warning("Machine Learning model or vectorizer not found. ML classification will be skipped.")

class MalwareScanner:
    """
    Scans PE files for malware indicators, including:
    - PE header analysis
    - Imported API function analysis
    - String extraction
    - Section entropy checks
    - VirusTotal hash lookup
    - Machine learning-based classification
    """

    def __init__(self, file_path):
        self.file_path = file_path
        self.pe = None
        self.suspicious_functions = []
        self.strings = []
        self.entropy_results = {}
        self.virustotal_result = {}
        self.ml_prediction = "Unknown"

    def load_pe_file(self):
        """Loads the PE file and initializes analysis."""
        try:
            self.pe = pefile.PE(self.file_path)
        except pefile.PEFormatError:
            logging.error(f"Error: {self.file_path} is not a valid PE file.")
            return False
        return True

    def get_file_hash(self):
        """Calculates SHA256 hash of the file."""
        try:
            with open(self.file_path, "rb") as f:
                file_hash = hashlib.sha256(f.read()).hexdigest()
            return file_hash
        except Exception as e:
            logging.error(f"Error calculating file hash: {e}")
            return None

    def analyze_imports(self):
        """Extracts imported API functions from PE file."""
        try:
            imports = []
            for entry in self.pe.DIRECTORY_ENTRY_IMPORT:
                for imp in entry.imports:
                    if imp.name:
                        imports.append(imp.name.decode())
            self.suspicious_functions = imports
        except AttributeError:
            logging.warning("No imported functions found.")
        except Exception as e:
            logging.error(f"Error extracting imports: {e}")

    def extract_strings(self, min_length=5):
        """Extracts ASCII strings from the PE file."""
        try:
            with open(self.file_path, "rb") as f:
                raw_data = f.read()
            self.strings = re.findall(rb"[ -~]{%d,}" % min_length, raw_data)
            self.strings = [s.decode(errors="ignore") for s in self.strings]
        except Exception as e:
            logging.error(f"Error extracting strings: {e}")

    def check_section_entropy(self):
        """Checks entropy of PE sections to detect packed or encrypted malware."""
        try:
            for section in self.pe.sections:
                entropy = self._calculate_entropy(section.get_data())
                self.entropy_results[section.Name.decode().strip("\x00")] = entropy
                if entropy > 7.5:
                    logging.warning(f"High entropy detected in {section.Name.decode().strip()} - Possible packed malware")
        except Exception as e:
            logging.error(f"Error analyzing section entropy: {e}")

    def _calculate_entropy(self, data):
        """Calculates Shannon entropy for a given data section."""
        if not data:
            return 0
        entropy = -sum((data.count(byte) / len(data)) * (data.count(byte) / len(data)).bit_length() for byte in set(data))
        return entropy

    def check_virustotal(self):
        """Checks the file hash against VirusTotal."""
        if not VIRUSTOTAL_API_KEY:
            logging.warning("VirusTotal API key is missing. Skipping hash lookup.")
            return

        file_hash = self.get_file_hash()
        if not file_hash:
            return

        url = f"https://www.virustotal.com/api/v3/files/{file_hash}"
        headers = {"x-apikey": VIRUSTOTAL_API_KEY}

        try:
            response = requests.get(url, headers=headers)
            if response.status_code == 200:
                data = response.json()
                self.virustotal_result = {
                    "malicious_votes": data["data"]["attributes"]["last_analysis_stats"]["malicious"],
                    "total_votes": sum(data["data"]["attributes"]["last_analysis_stats"].values())
                }
            else:
                logging.warning(f"VirusTotal query failed: {response.status_code}")
        except requests.RequestException as e:
            logging.error(f"Error querying VirusTotal: {e}")

    def classify_with_ml(self):
        """Uses a machine learning model to classify the file as malware or benign."""
        if not model or not vectorizer:
            logging.warning("ML Model or Vectorizer is missing. Skipping ML classification.")
            return

        try:
            feature_vector = vectorizer.transform([" ".join(self.suspicious_functions)])
            prediction = model.predict(feature_vector)
            self.ml_prediction = "Malicious" if prediction[0] == 1 else "Benign"
        except Exception as e:
            logging.error(f"Error classifying file with ML: {e}")

    def generate_report(self, output_file="reports/malware_report.json"):
        """Generates a structured JSON report of scan results."""
        report = {
            "file": self.file_path,
            "sha256": self.get_file_hash(),
            "suspicious_functions": self.suspicious_functions,
            "extracted_strings": self.strings[:20],  # Limit output for readability
            "section_entropy": self.entropy_results,
            "virustotal": self.virustotal_result,
            "ml_prediction": self.ml_prediction
        }

        os.makedirs("reports", exist_ok=True)
        with open(output_file, "w") as f:
            json.dump(report, f, indent=4)

        logging.info(f"Scan report saved: {output_file}")

    def run_scan(self):
        """Runs all scanning procedures on the file."""
        if not self.load_pe_file():
            return

        self.analyze_imports()
        self.extract_strings()
        self.check_section_entropy()
        self.check_virustotal()
        self.classify_with_ml()
        self.generate_report()

if __name__ == "__main__":
    file_path = input("Enter path to PE file: ")
    scanner = MalwareScanner(file_path)
    scanner.run_scan()