import sqlite3
import json
import csv
import os
from rich.console import Console
from rich.table import Table

# Database File
DB_FILE = "malware_logs.db"

def fetch_logs(table_name):
    """Fetch logs from the specified table with error handling."""
    try:
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        cursor.execute(f"SELECT * FROM {table_name}")
        logs = cursor.fetchall()
        conn.close()
        return logs
    except sqlite3.Error as e:
        print(f"[ERROR] Failed to fetch logs from {table_name}: {e}")
        return []

def generate_json_report(output_file="malware_report.json"):
    """Generates a JSON report containing all malware activity logs."""
    logs = {
        "registry": fetch_logs("registry_logs"),
        "filesystem": fetch_logs("filesystem_logs"),
        "network": fetch_logs("network_logs")
    }

    if not any(logs.values()):
        print("[WARNING] No logs found. JSON report not generated.")
        return

    try:
        with open(output_file, "w") as f:
            json.dump(logs, f, indent=4)
        print(f"[INFO] JSON report saved to {output_file}")
    except Exception as e:
        print(f"[ERROR] Failed to save JSON report: {e}")

def generate_csv_report(output_file="malware_report.csv"):
    """Exports malware logs to a CSV file."""
    logs = fetch_logs("registry_logs") + fetch_logs("filesystem_logs") + fetch_logs("network_logs")
    
    if not logs:
        print("[WARNING] No logs found. CSV report not generated.")
        return

    try:
        with open(output_file, "w", newline="") as f:
            writer = csv.writer(f)
            writer.writerow(["ID", "Timestamp", "Category", "Details"])
            writer.writerows(logs)
        print(f"[INFO] CSV report saved to {output_file}")
    except Exception as e:
        print(f"[ERROR] Failed to save CSV report: {e}")

def generate_terminal_report():
    """Displays a formatted malware behavior report in the terminal using `rich`."""
    console = Console()
    logs = fetch_logs("registry_logs") + fetch_logs("filesystem_logs") + fetch_logs("network_logs")
    
    if not logs:
        console.print("[bold yellow]No logs found.[/bold yellow]")
        return
    
    table = Table(title="Malware Behavior Report")
    table.add_column("ID", style="cyan", justify="right")
    table.add_column("Timestamp", style="green")
    table.add_column("Category", style="blue")
    table.add_column("Details", style="magenta")

    for log in logs:
        table.add_row(str(log[0]), log[1], log[2], log[3])

    console.print(table)

if __name__ == "__main__":
    generate_json_report()
    generate_csv_report()
    generate_terminal_report()
