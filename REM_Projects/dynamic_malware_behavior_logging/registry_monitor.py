import winreg
import sqlite3
import time
from datetime import datetime

# Database Setup
DB_FILE = "malware_logs.db"

def setup_database():
    """Creates a database table for storing registry activity logs."""
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS registry_logs (
                      id INTEGER PRIMARY KEY AUTOINCREMENT,
                      timestamp TEXT,
                      action TEXT,
                      registry_key TEXT,
                      value_name TEXT,
                      value_data TEXT)''')
    conn.commit()
    conn.close()

def log_registry_activity(action, registry_key, value_name, value_data):
    """Logs registry activity into the SQLite database."""
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("INSERT INTO registry_logs (timestamp, action, registry_key, value_name, value_data) VALUES (?, ?, ?, ?, ?)",
                   (datetime.now().strftime("%Y-%m-%d %H:%M:%S"), action, registry_key, value_name, value_data))
    conn.commit()
    conn.close()
    print(f"[LOG] {action}: {registry_key}\\{value_name} -> {value_data}")

class RegistryMonitor:
    """Monitors Windows registry changes in sensitive locations."""
    
    def __init__(self, hive, subkey):
        self.hive = hive
        self.subkey = subkey
        self.last_snapshot = self.get_registry_snapshot()

    def get_registry_snapshot(self):
        """Takes a snapshot of registry keys and values."""
        snapshot = {}
        try:
            with winreg.OpenKey(self.hive, self.subkey, 0, winreg.KEY_READ) as key:
                i = 0
                while True:
                    try:
                        value_name, value_data, _ = winreg.EnumValue(key, i)
                        snapshot[value_name] = value_data
                        i += 1
                    except OSError:
                        break
        except Exception as e:
            print(f"[ERROR] Failed to read registry: {e}")
        return snapshot

    def monitor_changes(self):
        """Continuously monitors registry changes."""
        print(f"[*] Monitoring registry changes: {self.subkey}")
        while True:
            current_snapshot = self.get_registry_snapshot()
            added_keys = set(current_snapshot.keys()) - set(self.last_snapshot.keys())
            removed_keys = set(self.last_snapshot.keys()) - set(current_snapshot.keys())
            modified_keys = {k for k in self.last_snapshot.keys() & current_snapshot.keys() if self.last_snapshot[k] != current_snapshot[k]}
            
            for key in added_keys:
                log_registry_activity("Added", self.subkey, key, current_snapshot[key])
            for key in removed_keys:
                log_registry_activity("Removed", self.subkey, key, "N/A")
            for key in modified_keys:
                log_registry_activity("Modified", self.subkey, key, current_snapshot[key])
            
            self.last_snapshot = current_snapshot
            time.sleep(5)

if __name__ == "__main__":
    setup_database()
    monitor = RegistryMonitor(winreg.HKEY_CURRENT_USER, "Software\\Microsoft\\Windows\\CurrentVersion\\Run")
    monitor.monitor_changes()
