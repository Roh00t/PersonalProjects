import os
import time
import sqlite3
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
from datetime import datetime

# Database Setup
def setup_database():
    """Creates a database to store file system activity logs."""
    conn = sqlite3.connect("malware_logs.db")
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS filesystem_logs (
                      id INTEGER PRIMARY KEY AUTOINCREMENT,
                      timestamp TEXT,
                      event_type TEXT,
                      file_path TEXT)''')
    conn.commit()
    conn.close()

def log_event(event_type, file_path):
    """Logs file system events into the SQLite database."""
    conn = sqlite3.connect("malware_logs.db")
    cursor = conn.cursor()
    cursor.execute("INSERT INTO filesystem_logs (timestamp, event_type, file_path) VALUES (?, ?, ?)",
                   (datetime.now().strftime("%Y-%m-%d %H:%M:%S"), event_type, file_path))
    conn.commit()
    conn.close()

class FileMonitorHandler(FileSystemEventHandler):
    """Handles file system events and logs changes."""
    
    def on_modified(self, event):
        if not event.is_directory:
            print(f"[MODIFIED] {event.src_path}")
            log_event("Modified", event.src_path)
    
    def on_created(self, event):
        if not event.is_directory:
            print(f"[CREATED] {event.src_path}")
            log_event("Created", event.src_path)
    
    def on_deleted(self, event):
        print(f"[DELETED] {event.src_path}")
        log_event("Deleted", event.src_path)

class FileMonitor:
    """Monitors file system changes in specified directories."""
    
    def __init__(self, path="C:\\"):
        self.path = path
        self.observer = Observer()

    def start(self):
        """Starts monitoring file system events."""
        setup_database()
        event_handler = FileMonitorHandler()
        self.observer.schedule(event_handler, self.path, recursive=True)
        self.observer.start()
        print(f"[*] Monitoring filesystem changes in: {self.path}")

        try:
            while True:
                time.sleep(5)
        except KeyboardInterrupt:
            self.observer.stop()
        self.observer.join()

if __name__ == "__main__":
    monitor = FileMonitor(path="C:\\Users\\Public")  # Change to target directory
    monitor.start()
