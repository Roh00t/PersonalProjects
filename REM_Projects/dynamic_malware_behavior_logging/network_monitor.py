import sqlite3
import scapy.all as scapy
import psutil
import socket
from datetime import datetime

# Database Setup
DB_FILE = "malware_logs.db"

def setup_database():
    """Creates a database table for storing network activity logs."""
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS network_logs (
                      id INTEGER PRIMARY KEY AUTOINCREMENT,
                      timestamp TEXT,
                      process_name TEXT,
                      source_ip TEXT,
                      dest_ip TEXT,
                      dest_port INTEGER,
                      protocol TEXT)''')
    conn.commit()
    conn.close()

def log_network_activity(process_name, src_ip, dst_ip, dst_port, protocol):
    """Logs network activity into the SQLite database."""
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("INSERT INTO network_logs (timestamp, process_name, source_ip, dest_ip, dest_port, protocol) VALUES (?, ?, ?, ?, ?, ?)",
                   (datetime.now().strftime("%Y-%m-%d %H:%M:%S"), process_name, src_ip, dst_ip, dst_port, protocol))
    conn.commit()
    conn.close()
    print(f"[LOG] {process_name}: {src_ip} â†’ {dst_ip}:{dst_port} [{protocol}]")

def get_process_name(pid):
    """Retrieves process name by PID."""
    try:
        return psutil.Process(pid).name()
    except (psutil.NoSuchProcess, psutil.AccessDenied):
        return "Unknown"

def packet_callback(packet):
    """Processes captured packets and logs network activity."""
    if packet.haslayer(scapy.IP):
        src_ip = packet[scapy.IP].src
        dst_ip = packet[scapy.IP].dst
        protocol = "TCP" if packet.haslayer(scapy.TCP) else "UDP" if packet.haslayer(scapy.UDP) else "Other"
        dst_port = packet[scapy.TCP].dport if packet.haslayer(scapy.TCP) else packet[scapy.UDP].dport if packet.haslayer(scapy.UDP) else None
        
        # Retrieve process name associated with the connection
        process_name = "Unknown"
        for conn in psutil.net_connections(kind='inet'):
            if conn.raddr and conn.raddr.ip == dst_ip and conn.raddr.port == dst_port:
                process_name = get_process_name(conn.pid)
                break
        
        log_network_activity(process_name, src_ip, dst_ip, dst_port, protocol)

def start_network_monitor():
    """Starts sniffing packets for network monitoring."""
    setup_database()
    print("[*] Network monitoring started... Press Ctrl+C to stop.")
    scapy.sniff(prn=packet_callback, store=False)

if __name__ == "__main__":
    start_network_monitor()
